import random

from aiogram import Router
from aiogram.enums import ChatType
from aiogram.filters import (
    IS_MEMBER,
    IS_NOT_MEMBER,
    ChatMemberUpdatedFilter,
    Command,
    CommandObject,
    CommandStart,
)
from aiogram.types import (
    ChatMemberUpdated,
    KeyboardButton,
    Message,
)
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from base.items import ITEMS
from base.player import (
    check_user_stats,
    coin_top,
    generate_daily_gift,
    generate_exchanger,
    generate_quest,
    get_available_crafts,
    get_available_items_for_use,
    get_or_add_user_item,
    transfer_countable_item,
)
from base.weather import get_weather
from config import VERSION, config
from database.funcs import database
from helpers.consts import COIN_EMOJI
from helpers.datetime_utils import utcnow
from helpers.enums import ItemType
from helpers.exceptions import ItemNotFoundError, NoResult
from helpers.filters import ChatTypeFilter
from helpers.markups import InlineMarkup
from helpers.messages import Messages
from helpers.utils import (
    Loading,
    batched,
    check_user_subscription,
    check_version,
    get_item,
    get_item_emoji,
    get_middle_item_price,
    get_time_difference_string,
    get_user_tag,
    increment_achievement_progress,
    quick_markup,
    safe,
    send_channel_subscribe_message,
)

router = Router()

start_markup_builder = ReplyKeyboardBuilder()
if config.event.open:
    start_markup_builder.add(KeyboardButton(text="–ò–≤–µ–Ω—Ç"))

start_markup_builder.add(
    KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å"),
    KeyboardButton(text="–î–æ–º"),
    KeyboardButton(text="–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"),
    KeyboardButton(text="–ö–≤–µ—Å—Ç"),
    KeyboardButton(text="–ú–∞–≥–∞–∑–∏–Ω"),
    KeyboardButton(text="–†—ã–Ω–æ–∫"),
    KeyboardButton(text="–í–µ—Ä—Å—Ç–∞–∫"),
    KeyboardButton(text="–¢–æ–ø"),
    KeyboardButton(text="–Æ–∑"),
    KeyboardButton(text="–°—Ç–∞—Ç—ã"),
    KeyboardButton(text="–ü–æ–≥–æ–¥–∞"),
    KeyboardButton(text="–û–±–º–µ–Ω–Ω–∏–∫"),
    KeyboardButton(text="–ì–∞–π–¥"),
    KeyboardButton(text="–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"),
)

start_markup_builder.adjust(3)
START_MARKUP = start_markup_builder.as_markup()  # pylint: disable=assignment-from-no-return


@router.message(CommandStart())
async def start(message: Message, command: CommandObject):
    async with Loading(message):
        user_id = message.from_user.id

        user = await database.users.async_get(id=message.from_user.id)

        mess = f"–ó–¥–æ—Ä–æ–≤–∞ {user.name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É\n\n–ü–æ–º–æ—â—å: /help"

        if param := command.args:
            users_id = [str(user.id) for user in await database.users.async_get_all()]

            if param in users_id:
                if str(user_id) == param:
                    await message.reply(mess)
                    return
                if user is not None:
                    await message.reply(mess)
                    return
                ref_user = user = await database.users.async_get(id=int(param))
                if not ref_user:
                    await message.reply(mess, reply_markup=START_MARKUP)
                    return
                user = await database.users.async_get(id=message.from_user.id)

                coin = random.randint(5000, 15000)
                ref_user.coin += coin
                ref_user.karma += 5
                await database.users.async_update(**ref_user.to_dict())
                increment_achievement_progress(ref_user, "–¥—Ä—É–∑—å—è –Ω–∞–≤–µ–∫–∏")

                await safe(
                    message.bot.send_message(
                        ref_user.id,
                        (
                            f"{user.name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ –±–ª–∞–≥–æ–¥–∞—Ä—è —Ç–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ\n"
                            f"–¢—ã –ø–æ–ª—É—á–∏–ª {coin} –±–∞–±–ª–∞ {get_item_emoji('–±–∞–±–ª–æ')}"
                        ),
                    )
                )

                return

        if message.chat.type != "private":
            markup = None
        else:
            markup = START_MARKUP

        await message.reply(mess, reply_markup=markup)


@router.message(Command("help"))
async def help(message: Message):
    mess = (
        "<b>–ü–æ–º–æ—â—å</b>\n\n"
        "<b>–ö–∞–Ω–∞–ª:</b> @LiveBotOfficial\n"
        "<b>–ß–∞—Ç</b>: @LiveBotOfficialChat\n"
        "<b>–ì–∞–π–¥</b>: https://hamletsargsyan.github.io/livebot/guide\n"
    )

    await message.reply(mess)


@router.message(Command("profile"))
async def profile_cmd(message: Message):
    async with Loading(message):
        if message.reply_to_message:
            user = user = await database.users.async_get(id=message.reply_to_message.id)
        else:
            user = await database.users.async_get(id=message.from_user.id)

        await check_user_stats(user, message.chat.id)

        mess = Messages.profile(user)

        markup = InlineMarkup.open_friends_list(user)
        await message.reply(mess, reply_markup=markup)


@router.message(Command("bag"))
async def bag_cmd(message: Message):
    async with Loading(message):
        user = await database.users.async_get(id=message.from_user.id)

        mess = "<b>–†—é–∫–∑–∞–∫</b>\n\n"
        inventory = await database.items.async_get_all(owner=user._id)
        if not inventory:
            mess += "<i>–ü—É—Å—Ç–æ...</i>"
        else:
            inventory.sort(
                key=lambda item: item.usage if item.usage else item.quantity,
                reverse=True,
            )
            inventory.sort(key=lambda item: item.quantity, reverse=True)

            for item in inventory:
                if item.quantity <= 0 or (item.usage and item.usage <= 0):
                    continue
                usage = f" ({int(item.usage)}%)" if item.usage else ""
                mess += f"{get_item_emoji(item.name)} {item.name} - {item.quantity}{usage}\n"

        await message.reply(mess)


@router.message(Command("items"))
async def items_cmd(message: Message):
    async with Loading(message):
        mess = f"<b>–ü—Ä–µ–¥–º–µ—Ç—ã</b>\n\n1 / {len(list(batched(ITEMS, 6)))}"
        user = await database.users.async_get(id=message.from_user.id)
        markup = markup = InlineMarkup.items_pager(user=user)

        await message.reply(mess, reply_markup=markup)


@router.message(Command("shop"))
async def shop_cmd(message: Message):
    async with Loading(message):
        args = message.text.split(" ")

        if len(args) != 3:
            items = list(filter(lambda item: item.price, ITEMS))
            items.sort(key=lambda item: item.price, reverse=True)  # type: ignore
            mess = "<b>üõç–ú–∞–≥–∞–∑–∏–Ωüõç</b>\n\n"
            for item in items:
                if not item.price:
                    continue

                mess += f"{item.emoji} {item.name} - {item.price}/—à—Ç.\n"
            await message.reply(mess)
            return

        err_mess = "–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞–ª\n–ù–∞–¥–æ: <code>/shop [–∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞] [–∫–æ–ª-–≤–æ]</code>"

        if len(args) != 3:
            await message.reply(err_mess)
            return

        user = await database.users.async_get(id=message.from_user.id)

        item_name = args[1]
        try:
            count = int(args[2])
        except (ValueError, IndexError):
            count = 1

        if not get_item(item_name):
            await message.reply("–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return

        item = get_item(item_name)

        if not item.price:
            await message.reply("–≠—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å, —É –Ω–µ–≥–æ –Ω–µ—Ç —Ü–µ–Ω—ã")
            return

        price = item.price * count
        if user.coin < price:
            await message.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –±–∞–±–ª–∞, –∏–¥–∏ —Ä–∞–±–æ—Ç–∞—Ç—å")
            return

        user.coin -= price
        user_item = get_or_add_user_item(user, get_item(item.name).name)

        user_item.quantity += count
        await database.users.async_update(**user.to_dict())
        await database.items.async_update(**user_item.to_dict())

        emoji = get_item_emoji(item.name)
        await message.reply(
            f"–ö—É–ø–∏–ª {count} {item.name} {emoji} –∑–∞ {price} {COIN_EMOJI}",
        )


@router.message(Command("casino"))
async def casino(message: Message, command: CommandObject):
    async with Loading(message):
        count = command.args

        if not count:
            mess = (
                "<b>üé∞–ö–∞–∑–∏–Ω–æüé∞</b>\n\n"
                "–†–µ—à–∏–ª –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –ª–µ–≥–∫–∏–µ –¥–µ–Ω—å–≥–∏? –ù—É –¥–∞–≤–∞–π\n"
                "–®–∞–Ω—Å—ã 50 –Ω–∞ 50\n"
                "–ß—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –Ω–∞–ø–∏—à–∏ <code>/casino [–∫–æ–ª-–≤–æ]</code>"
            )
            await message.reply(mess)
            return

        try:
            count = int(count)
        except ValueError:
            count = 1

        user = await database.users.async_get(id=message.from_user.id)

        ticket = get_or_add_user_item(user, "–±–∏–ª–µ—Ç")

        if (not ticket) or (ticket.quantity <= 0):
            await message.reply(
                f"–ß—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ —É —Ç–µ–±—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–∏–ª–µ—Ç {get_item_emoji('–±–∏–ª–µ—Ç')}",
            )
            return

        chance = random.randint(0, 10)

        if count > user.coin:
            await message.reply(
                f"–ù–∏—Ñ–∏–≥–∞ —Å–µ —Ü–∏—Ñ—Ä—ã, —É —Ç–µ–±—è –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ {user.coin} {get_item_emoji('–±–∞–±–ª–æ')}",
            )
            return

        if count <= 0:
            count = 1

        if user.coin <= 0:
            await message.reply("–ö—É–¥–∞–∞, —É —Ç–µ–±—è –Ω–µ—Ç –±–∞–±–ª–∞, –∏–¥–∏ —Ä–∞–±–æ—Ç–∞—Ç—å")
            return

        await message.answer_dice("üé≤")
        ticket.quantity -= 1
        if chance <= 5:
            await message.answer(f"–ë–ª–∏–Ω, —Å–æ—Ä—è–Ω\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n-{count}")
            user.coin -= count
            user.casino_loose += count

        else:
            await message.answer(f"–ù–∏—Ñ–∏–≥–∞ —Å–µ\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n+{count * 2}")
            user.coin += count * 2
            user.casino_win += count * 2

        await database.users.async_update(**user.to_dict())
        await database.items.async_update(**ticket.to_dict())
        await check_user_stats(user, message.chat.id)


@router.message(Command("workbench"))
@router.message(Command("craft"))
async def workbench_cmd(message: Message):
    async with Loading(message):
        user = await database.users.async_get(id=message.from_user.id)

        mess = (
            "<b>üß∞–í–µ—Ä—Å—Ç–∞–∫üß∞</b>\n\n"
            "–ß—Ç–æ–±—ã —Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å —á—Ç–æ-—Ç–æ —Ç–æ –Ω–∞–ø–∏—à–∏ <code>/craft [–∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞] [–∫–æ–ª-–≤–æ]</code>\n\n"
        )

        args = message.text.split(" ")

        if not args or len(args) < 2:
            available_crafts = get_available_crafts(user)
            if available_crafts:
                mess += "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∞—Ñ—Ç—ã</b>\n"
                for craft_data in available_crafts:
                    item_name = craft_data["item_name"]
                    resources = craft_data["resources"]

                    possible_crafts = min(
                        user_item["user_item_quantity"] // user_item["item_count"]
                        for user_item in resources
                    )

                    craft_str = f"{get_item_emoji(item_name)} {item_name} - {possible_crafts}\n"
                    mess += f"{craft_str}"
            await message.reply(mess)
            return

        name = args[1].lower()
        try:
            count = int(args[2])
        except (ValueError, IndexError):
            count = 1

        if not get_item(name):
            await message.reply("–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return

        item_data = get_item(name)

        if not item_data.craft:
            await message.reply(f"–£ {item_data.emoji} –Ω–µ—Ç –∫—Ä–∞—Ñ—Ç–∞")
            return

        craft = item_data.craft

        for craft_item in craft.items():
            user_item = get_or_add_user_item(user, craft_item[0])
            if (
                (not user_item)
                or (user_item.quantity <= 0)
                or (user_item.quantity < craft_item[1] * count)
            ):
                await message.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
                return

            user_item.quantity -= craft_item[1] * count
            await database.items.async_update(**user_item.to_dict())

        item = get_or_add_user_item(user, name)

        item.quantity += count
        xp = random.uniform(5.0, 10.0) * count
        if random.randint(1, 100) < user.luck:
            xp += random.uniform(2.3, 6.7)

        user.xp += xp

        await database.items.async_update(**item.to_dict())
        await database.users.async_update(**user.to_dict())
        await message.reply(f"–°–∫—Ä–∞—Ñ—Ç–∏–ª {count} {name} {get_item_emoji(name)}\n+ {int(xp)} —Ö–ø")

        await check_user_stats(user, message.chat.id)


@router.message(Command("transfer"))
async def transfer_cmd(message: Message):
    async with Loading(message):
        if not message.reply_to_message:
            await message.reply("–ö–æ–º—É –∫–∏–¥–∞—Ç—å —Å–æ–±—Ä–∞–ª—Å—è??")
            return

        user = await database.users.async_get(id=message.from_user.id)
        reply_user = await database.users.async_get(id=message.reply_to_message.id)

        args = message.text.split(" ")

        err_mess = (
            "–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞–ª, –Ω–∞–¥–æ —Ç–∞–∫:\n<code>/transfer [–∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞] [–∫–æ–ª-–≤–æ]</code>"
        )

        if len(args) < 2:
            await message.reply(err_mess)
            return

        item_name = args[1].lower()
        try:
            item = get_item(item_name)
        except ItemNotFoundError:
            await message.reply(f"{item_name}??\n–°–µ—Ä—å—ë–∑–Ω–æ?\n\n–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return

        try:
            quantity = int(args[2])
        except (ValueError, IndexError):
            quantity = 1

        if item_name == "–±–∞–±–ª–æ":
            if user.coin <= 0:
                await message.reply(f"–£ —Ç–µ–±—è –Ω–µ—Ç <i>{item_name}</i>")
                return
            if user.coin <= quantity:
                await message.reply("–£ —Ç–µ–±—è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–±–ª–∞, –∏–¥–∏ —Ä–∞–±–æ—Ç–∞—Ç—å")
                return
            user.coin -= quantity
            reply_user.coin += quantity
        else:
            if item.type == ItemType.USABLE:
                mess = "–í—ã–±–µ—Ä–∏ –∫–∞–∫–æ–π"
                markup = InlineMarkup.transfer_usable_items(user, reply_user, item_name)

                await message.reply(mess, reply_markup=markup)
                return

            user_item = get_or_add_user_item(user, item_name)

            if (user_item.quantity < quantity) or (user_item.quantity <= 0):
                await message.reply(f"–£ —Ç–µ–±—è –Ω–µ—Ç <i>{item_name}</i>")
                return
            transfer_countable_item(user_item, quantity, reply_user)

        mess = (
            f"{user.name} –ø–æ–¥–∞—Ä–∏–ª {reply_user.name}\n"
            "----------------\n"
            f"{item.emoji} {item_name} {quantity}"
        )

        await database.users.async_update(**user.to_dict())
        await database.users.async_update(**reply_user.to_dict())

        await message.answer(mess)


@router.message(Command("event"))
async def event_cmd(message: Message):
    async with Loading(message):
        user = await database.users.async_get(id=message.from_user.id)
        markup = quick_markup(
            {"–ì–∞–π–¥": {"url": "https://hamletsargsyan.github.io/livebot/guide/#–∏–≤–µ–Ω—Ç"}}
        )

        if config.event.open is False:
            if config.event.start_time < utcnow():
                await message.reply("–ò–≤–µ–Ω—Ç –∑–∞–∫–æ–Ω—á–∏–ª—Å—è", reply_markup=markup)
            else:
                time_difference = get_time_difference_string(config.event.start_time - utcnow())
                await message.reply(
                    f"–î–æ –Ω–∞—á–∞–ª–∞ –∏–≤–µ–Ω—Ç–∞ –æ—Å—Ç–∞–ª–æ—Å—å {time_difference}",
                    reply_markup=markup,
                )
            return

        time_difference = config.event.end_time - utcnow()
        time_left = get_time_difference_string(time_difference)

        mess = (
            "<b>–ò–≤–µ–Ω—Ç üéÉ</b>\n\n"
            "–°–æ–±–∏—Ä–∞–π üç¨ –∏ –ø–æ–±–µ–∂–¥–∞–π\n\n"
            "–ö–æ–Ω—Ñ–µ—Ç—ã –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏ –∏ –≤ –±–æ–∫—Å–µ\n\n"
            f"<b>–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å:</b> {time_left}\n\n"
            "<b>–¢–æ–ø 10 –ø–æ üç¨</b>\n\n"
        )

        items = await database.items.async_get_all(name="–∫–æ–Ω—Ñ–µ—Ç–∞")
        sorted_items = sorted(items, key=lambda item: item.quantity, reverse=True)
        for index, item in enumerate(sorted_items, start=1):
            if item.quantity > 0:
                owner = await database.users.async_get(**{"_id": item.owner})
                mess += f"{index}. {owner.name} - {item.quantity}\n"
            if index == 10:
                break

        item = get_or_add_user_item(user, "–∫–æ–Ω—Ñ–µ—Ç–∞")
        mess += f"\n\n–¢—ã —Å–æ–±—Ä–∞–ª: {item.quantity}"
        await message.reply(mess, reply_markup=markup)


@router.message(Command("top"))
async def top_cmd(message: Message):
    async with Loading(message):
        mess = coin_top()

        markup = InlineMarkup.top(message)

        await message.reply(mess, reply_markup=markup)


@router.message(Command("use"))
async def use_cmd(message: Message):
    async with Loading(message):
        user = await database.users.async_get(id=message.from_user.id)

        args = message.text.split(" ")

        if len(args) < 2:
            items = get_available_items_for_use(user)
            markup = InlineMarkup.use(user, items)

            if items:
                mess = "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —é–∑–∞</b>\n\n"
            else:
                mess = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —é–∑–∞"
            await message.reply(mess, reply_markup=markup)
            return


@router.message(Command("ref"))
async def ref_cmd(message: Message):
    async with Loading(message):
        user = await database.users.async_get(id=message.from_user.id)

        mess = (
            "–•–æ—á–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å?\n"
            "–¢—ã –ø–æ –∞–¥—Ä–µ—Å—É, –ø—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ –æ—Ç 5–∫ –¥–æ 15–∫ –±–∞–±–ª–∞\n"
            f"–í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–æ—á–∫–∞: https://t.me/{(await message.bot.me()).username}?start={user.id}"
        )
        await message.reply(mess)


@router.message(Command("promo"))
async def promo(message: Message) -> None:
    async with Loading(message):
        user = await database.users.async_get(id=message.from_user.id)

        await message.delete()
        if not await check_user_subscription(user):
            await send_channel_subscribe_message(message)
            return

        text = message.text.split(" ")

        if len(text) != 1:
            text = text[1]

            code = await database.promos.async_get(name=text)
            if code:
                promo_users = code.users
                if user.id in promo_users:
                    await message.answer("–¢—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥")
                    return

                if code.is_used:
                    await message.answer("–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏")
                    return

                code.usage_count -= 1

                if code.usage_count <= 0:
                    code.usage_count = 0
                    code.is_used = True

                mess = f"–£—Ö—Ç—ã—ã, {user.name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ –∏ –ø–æ–ª—É—á–∏–ª\n\n"
                for item in code.items:
                    if item == "–±–∞–±–ª–æ":
                        user.coin += code.items[item]
                        await database.users.async_update(**user.to_dict())
                    else:
                        user_item = get_or_add_user_item(user, item)
                        user_item.quantity += code.items[item]
                        await database.items.async_update(**user_item.to_dict())
                    mess += f"+ {code.items[item]} {item} {get_item_emoji(item)}\n"
                promo_users.append(user.id)
                code.users = promo_users

                await database.promos.async_update(**code.to_dict())
                await message.answer_sticker(
                    "CAACAgIAAxkBAAEpjI9l0i13xK0052Ruta0D5a5lWozGBgACHQMAAladvQrFMjBk7XkPEzQE",
                )
                await message.answer(mess)
            else:
                await message.answer("–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")


@router.message(Command("stats"))
async def stats_cmd(message: Message):
    async with Loading(message):
        user = await database.users.async_get(id=message.from_user.id)

        mess = (
            "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n\n"
            f"<b>[ –ö–∞–∑–∏–Ω–æ ]</b>\n"
            f"- –í—ã–∏–≥—Ä–∞–ª: {user.casino_win}\n"
            f"- –ü—Ä–æ—Å—Ä–∞–ª: {user.casino_loose}\n"
            f"- –ü—Ä–æ—Ñ–∏—Ç: {user.casino_win - user.casino_loose}\n\n"
            f"<b>[ –û–±—â–µ–µ ]</b>\n"
            f"- –ö–æ–ª-–≤–æ –¥–Ω–µ–π –≤ –∏–≥—Ä–µ: {(utcnow() - user.registered_at).days} –¥.\n"
            f"- –ó–∞–±–∞–Ω–µ–Ω: {'–¥–∞' if user.is_banned else '–Ω–µ—Ç'}\n"
            f"- –ê–¥–º–∏–Ω: {'–¥–∞' if user.is_admin else '–Ω–µ—Ç'}"
        )

        await message.reply(mess)


@router.message(Command("quest"))
async def quest_cmd(message: Message):
    async with Loading(message):
        user = await database.users.async_get(id=message.from_user.id)
        try:
            quest = await database.quests.async_get(owner=user._id)
        except NoResult:
            quest = generate_quest(user)

        item = get_or_add_user_item(user, quest.name)

        finish_button_text = (
            f"{item.quantity} / {quest.quantity}" if item.quantity < quest.quantity else "–ó–∞–≤–µ—Ä—à–∏—Ç—å"
        )

        markup = quick_markup(
            {
                finish_button_text: {"callback_data": f"finish_quest {user.id}"},
                "–ü—Ä–æ–ø—É—Å–∫": {"callback_data": f"skip_quest {user.id}"},
            }
        )

        mess = (
            "<b>–ö–≤–µ—Å—Ç</b>\n\n"
            f"<i>–°–æ–±–µ—Ä–∏ {quest.quantity} {quest.name} {get_item_emoji(quest.name)}</i>\n\n"
            f"<b>–ù–∞–≥—Ä–∞–¥–∞:</b> {quest.reward} {get_item_emoji('–±–∞–±–ª–æ')}"
        )

        await message.reply(mess, reply_markup=markup)


@router.message(Command("weather"))
async def weather_cmd(message: Message):
    async with Loading(message):
        weather = get_weather()

        mess = (
            f"<b>{weather.current.emoji} –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã</b>\n\n"
            f"{weather.current.temperature_2m} {weather.current_units.temperature_2m}\n"
            f"{weather.current.ru_type}"
        )

        await message.reply(mess)


@router.message(Command("exchanger"))
async def exchanger_cmd(message: Message):
    # if True:
    #     await message.reply(
    #         (
    #             "–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑-–∑–∞"
    #             "<a href='https://github.com/HamletSargsyan/livebot/issues/18'>–±–∞–≥–∞</a> :("
    #         ),
    #     )
    #     return
    async with Loading(message):
        user = await database.users.async_get(id=message.from_user.id)
        markup = quick_markup(
            {"–ì–∞–π–¥": {"url": "https://hamletsargsyan.github.io/livebot/guide/#–æ–±–º–µ–Ω–Ω–∏–∫"}}
        )

        if user.level < 5:
            await message.reply("–û–±–º–µ–Ω–Ω–∏–∫ –¥–æ—Å—Ç—É–ø–µ–Ω —Å 5 —É—Ä–æ–≤–Ω—è", reply_markup=markup)
            return

        try:
            exchanger = await database.exchangers.async_get(owner=user._id)
        except NoResult:
            exchanger = generate_exchanger(user)

        if exchanger.expires < utcnow():
            exchanger = generate_exchanger(user)
            await database.exchangers.async_update(**exchanger.to_dict())

        time_difference = get_time_difference_string(exchanger.expires - utcnow())
        mess = (
            "<b>–û–±–º–µ–Ω–Ω–∏–∫ üîÑ</b>\n\n"
            f"<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {exchanger.item} {get_item_emoji(exchanger.item)}\n"
            f"<b>–¶–µ–Ω–∞ –∑–∞ 1 —à—Ç:</b> {exchanger.price} {COIN_EMOJI}\n"
            f"<b>–ù–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑:</b> {time_difference}\n"
        )

        args = message.text.split(" ")

        if len(args) < 2:
            await message.reply(mess, reply_markup=markup)
            return

        try:
            quantity = int(args[1])
        except (ValueError, IndexError):
            quantity = 1

        user_item = get_or_add_user_item(user, exchanger.item)

        if not user_item:
            await message.reply(
                f"–£ —Ç–µ–±—è –Ω–µ—Ç {get_item_emoji(exchanger.item)}",
                reply_markup=markup,
            )
            return

        if user_item.quantity < quantity:
            await message.reply("–¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç", reply_markup=markup)
            return

        coin = quantity * exchanger.price
        user.coin += coin
        user_item.quantity -= quantity

        await database.users.async_update(**user.to_dict())
        await database.items.async_update(**user_item.to_dict())

        emoji = get_item_emoji(exchanger.item)
        await message.reply(
            f"–û–±–º–µ–Ω—è–ª {quantity} {emoji} –∑–∞ {coin} {COIN_EMOJI}",
            reply_markup=markup,
        )


@router.message(Command("dog"))
async def dog_cmd(message: Message):
    async with Loading(message):
        user = await database.users.async_get(id=message.from_user.id)

        try:
            dog = await database.dogs.async_get(owner=user._id)
        except NoResult:
            dog = None

        if not dog:
            await message.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ–±–∞—á–∫–∏")
            return

        # pylint: disable=duplicate-code
        mess = (
            f"<b>{dog.name}</b>\n\n"
            f"–ó–¥–æ—Ä–æ–≤—å–µ: {dog.health}\n"
            f"–£—Å—Ç–∞–ª–æ—Å—Ç—å: {dog.fatigue}\n"
            f"–ì–æ–ª–æ–¥: {dog.hunger}\n"
            f"–£—Ä–æ–≤–µ–Ω—å: {dog.level}\n"
            f"–û–ø—ã—Ç {int(dog.xp)}/{int(dog.max_xp)}\n"
        )

        # current_time = utcnow()
        # time_difference = current_time - user.dog.sleep_time

        # sleep_text = "–£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å"
        # sleep_callback = f"dog sleep {user.id}"
        # if time_difference <= timedelta(minutes=1):
        #     sleep_text = "–ü—Ä–æ–±—É–¥–∏—Ç—å"
        #     sleep_callback = f"dog wakeup {user.id}"

        markup = quick_markup(
            {
                "–ö–æ—Ä–º–∏—Ç—å": {"callback_data": f"dog feed {user.id}"},
                # sleep_text: {"callback_data": sleep_callback}
            }
        )

        await message.reply(mess, reply_markup=markup)


@router.message(Command("rename_dog"))
async def rename_dog_command(message: Message):
    async with Loading(message):
        user = await database.users.async_get(id=message.from_user.id)

        try:
            dog = await database.dogs.async_get(owner=user._id)
        except NoResult:
            dog = None

        if not dog:
            await message.reply("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ–±–∞—á–∫–∏")
            return

        try:
            name = message.text.split(" ")[1]
        except KeyError:
            await message.reply("–ü–æ –º–æ–µ–º—É —Ç—ã –∑–∞–±—ã–ª –Ω–∞–ø–∏—Å–∞—Ç—å –∏–º—è")
            return

        dog.name = name
        await database.dogs.async_update(**dog.to_dict())

        await message.reply("–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª —Å–æ–±–∞—á–∫—É")


@router.message(Command("price"))
async def price_cmd(message: Message):
    async with Loading(message):
        try:
            name = message.text.split(" ")[1].lower()
        except KeyError:
            await message.reply("–ü–æ –º–æ–µ–º—É —Ç—ã —á—Ç–æ-—Ç–æ –∑–∞–±—ã–ª...")
            return

        try:
            item = get_item(name)
        except ItemNotFoundError:
            await message.reply("—Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        price = get_middle_item_price(item.name)
        if not item:
            mess = "–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        elif price:
            mess = f"–ü—Ä–∞–π—Å {item.name} {item.emoji} ‚∏ª {price} {get_item_emoji('–±–∞–±–ª–æ')}"
        else:
            mess = f"–£ {item.emoji} –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∞–π—Å–∞"

        await message.reply(mess)


@router.message(Command("home"))
async def home_cmd(message: Message):
    async with Loading(message):
        user = await database.users.async_get(id=message.from_user.id)
        mess = "üè† –î–æ–º –º–∏–ª—ã–π –¥–æ–º"

        markup = InlineMarkup.home_main(user)

        await message.reply(mess, reply_markup=markup)


@router.message(Command("guide"))
async def guide_cmd(message: Message):
    mess = "–ì–∞–π–¥ –ø–æ LiveBot üçÉ"
    markup = quick_markup({"–ß–∏—Ç–∞—Ç—å": {"url": "https://hamletsargsyan.github.io/livebot/guide"}})

    await message.answer(mess, reply_markup=markup)


@router.message(Command("market"))
async def market_cmd(message: Message):
    user = await database.users.async_get(id=message.from_user.id)

    mess = "<b>–†—ã–Ω–æ–∫</b>\n\n"

    market_items = database.market_items.get_all()
    markup = InlineMarkup.market_pager(user)
    mess += f"1 / {len(list(batched(market_items, 6)))}"

    await message.reply(mess, reply_markup=markup)


@router.message(Command("daily_gift"))
async def daily_gift_cmd(message: Message):
    user = await database.users.async_get(id=message.from_user.id)

    if not await check_user_subscription(user):
        await send_channel_subscribe_message(message)
        return

    try:
        daily_gift = database.daily_gifts.get(owner=user._id)
    except NoResult:
        daily_gift = generate_daily_gift(user)

    mess = "<b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫</b>"

    if daily_gift.next_claimable_at <= utcnow():
        daily_gift = generate_daily_gift(user)

    markup = InlineMarkup.daily_gift(user, daily_gift)
    await message.reply(mess, reply_markup=markup)


@router.message(Command("version"))
async def version_cmd(message: Message):
    mess = f"<b>–í–µ—Ä—Å–∏—è –±–æ—Ç–∞</b>: <code>{VERSION}</code> | <i>{check_version()}</i>\n"
    markup = quick_markup(
        {"–†–µ–ª–∏–∑": {"url": f"https://github.com/HamletSargsyan/livebot/releases/tag/v{VERSION}"}}
    )
    await message.reply(mess, reply_markup=markup)


@router.message(Command("time"))
async def time_cmd(message: Message):
    time = utcnow().strftime("%H:%M:%S %d.%m.%Y")
    mess = f"–°–µ–π—á–∞—Å <code>{time}</code> –ø–æ UTC"
    await message.reply(mess)


@router.message(Command("achievements"))
async def achievements_cmd(message: Message):
    user = await database.users.async_get(id=message.from_user.id)

    markup = InlineMarkup.achievements(user)

    mess = "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è"
    await message.reply(mess, reply_markup=markup)


@router.message(Command("rules"))
async def rules_cmd(message: Message):
    mess = "–ü—Ä–∞–≤–∏–ª–∞"

    markup = quick_markup({"–ß–∏—Ç–∞—Ç—å": {"url": "https://hamletsargsyan.github.io/livebot/rules"}})

    await message.reply(mess, reply_markup=markup)


@router.message(Command("violations"))
async def violations_cmd(message: Message):
    user = await database.users.async_get(id=message.from_user.id)

    if len(user.violations) == 0:
        await message.reply("–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–π")
        return

    mess = "<b>–ù–∞—Ä—É—à–µ–Ω–∏—è</b>\n\n"

    for i, violation in enumerate(user.violations, start=1):
        until = (
            f" | –æ—Å—Ç–∞–ª–æ—Å—å {get_time_difference_string(violation.until_date - utcnow())}"
            if violation.until_date
            else ""
        )
        mess += f"{i}. {violation.type}{until}\n"
        mess += f"    <i>{violation.reason}</i>\n\n"

    await message.reply(mess)


@router.message(Command("event_shop"))
async def event_shop_cmd(message: Message):
    user = await database.users.async_get(id=message.from_user.id)
    user_event_item = get_or_add_user_item(user, "–∫–æ–Ω—Ñ–µ—Ç–∞")

    item = get_item(user_event_item.name)

    mess = "<b>–ò–≤–µ–Ω—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω</b>\n\n"
    mess += f"–£ —Ç–µ–±—è {user_event_item.quantity} {item.emoji}"

    markup = InlineMarkup.event_shop(user)

    await message.reply(mess, reply_markup=markup)


# ---------------------------------------------------------------------------- #


@router.chat_member(
    ChatMemberUpdatedFilter(IS_NOT_MEMBER >> IS_MEMBER),
    ChatTypeFilter(ChatType.GROUP, ChatType.SUPERGROUP),
)
async def new_chat_member(event: ChatMemberUpdated):
    markup = quick_markup(
        {
            "–ü—Ä–∞–≤–∏–ª–∞": {
                "url": "https://hamletsargsyan.github.io/livebot/rules",
            },
        }
    )
    user = await database.users.async_get(id=event.from_user.id)
    if str(event.chat.id) == config.telegram.chat_id:
        mess = (
            f"üëã –ü—Ä–∏–≤–µ—Ç {get_user_tag(user)}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —á–∞—Ç –ø–æ –ª–∞–π–≤–±–æ—Ç—É üíô\n\n"
        )
    else:
        mess = f"üëã {get_user_tag(user)} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–∞—Ç—É"
    await event.answer(mess, reply_markup=markup)


@router.chat_member(
    ChatMemberUpdatedFilter(IS_MEMBER >> IS_NOT_MEMBER),
    ChatTypeFilter(ChatType.GROUP, ChatType.SUPERGROUP),
)
async def left_chat_member(event: ChatMemberUpdated):
    user = await database.users.async_get(id=event.from_user.id)
    mess = f"üò¢ {get_user_tag(user)} –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç"
    await event.answer(mess)


@router.message()
async def text_message_handler(message: Message):
    user = await database.users.async_get(id=message.from_user.id)
    text = message.text.lower().strip()

    match text:
        case "–ø—Ä–æ—Ñ–∏–ª—å":
            await profile_cmd(message)
        case "–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å" | "–ø–æ—Ä—Ç—Ñ–µ–ª—å" | "–∏–Ω–≤":
            await bag_cmd(message)
        case _ if text.startswith(("–º–∞–≥–∞–∑–∏–Ω", "—à–æ–ø")):
            await shop_cmd(message)
        case _ if text.startswith(("–∫—Ä–∞—Ñ—Ç", "–≤–µ—Ä—Å—Ç–∞–∫")):
            await workbench_cmd(message)
        case "—Ç–æ–ø" | "—Ä–µ–π—Ç–∏–Ω–≥":
            await top_cmd(message)
        case "–∏–≤–µ–Ω—Ç":
            await event_cmd(message)
        case _ if text.startswith("—é–∑"):
            await use_cmd(message)
        case "–ø—Ä–µ–¥–º–µ—Ç—ã":
            await items_cmd(message)
        case "–±–∞–±–ª–æ":
            await message.reply(f"{COIN_EMOJI} –ë–∞–±–ª–æ: {user.coin}")
        case "—Å—Ç–∞—Ç—ã":
            await stats_cmd(message)
        case "–∫–≤–µ—Å—Ç":
            await quest_cmd(message)
        case "–ø–æ–≥–æ–¥–∞":
            await weather_cmd(message)
        case "–æ–±–º–µ–Ω–Ω–∏–∫":
            await exchanger_cmd(message)
        case _ if text.startswith("–ø–µ—Ä–µ–¥–∞—Ç—å"):
            await transfer_cmd(message)
        case "—Å–æ–±–∞–∫–∞":
            await dog_cmd(message)
        case _ if text.startswith("–ø—Ä–∞–π—Å"):
            await price_cmd(message)
        case "–≥–∞–π–¥":
            await guide_cmd(message)
        case "–¥–æ–º":
            await home_cmd(message)
        case "—Ä—ã–Ω–æ–∫":
            await market_cmd(message)
        case "–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è" | "–∞—á–∏–≤–∫–∏":
            await achievements_cmd(message)
