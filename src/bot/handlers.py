import random
import string
from datetime import datetime, timedelta
from typing import List

from telebot.types import (
    Message,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    WebAppInfo,
)
from telebot.util import (
    extract_arguments,
    user_link,
    quick_markup,
    content_type_media,
    antiflood,
    chunks,
)
from telebot.apihelper import ApiTelegramException

from helpers.exceptions import NoResult
from base.items import items_list
from helpers.markups import InlineMarkup
from helpers.utils import (
    check_user_subscription,
    get_middle_item_price,
    get_time_difference_string,
    get_item_emoji,
    get_item,
    Loading,
    send_channel_subscribe_message,
)
from base.player import (
    check_user_stats,
    coin_top,
    generate_daily_gift,
    get_available_crafts,
    generate_quest,
    generate_exchanger,
    get_available_items_for_use,
    get_or_add_user_item,
)
from base.weather import get_weather

import base.user_input  # noqa

from database.funcs import database
from database.models import ItemModel, PromoModel

from config import bot, event_end_time, event_open, channel_id, chat_id, logger


START_MARKUP = ReplyKeyboardMarkup(resize_keyboard=True)
if event_open:
    START_MARKUP.add(KeyboardButton("–ò–≤–µ–Ω—Ç"))

START_MARKUP.add(
    *[
        KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å"),
        KeyboardButton("–î–æ–º"),
        KeyboardButton("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"),
        KeyboardButton("–ö–≤–µ—Å—Ç"),
        KeyboardButton("–ú–∞–≥–∞–∑–∏–Ω"),
        KeyboardButton("–†—ã–Ω–æ–∫"),
        KeyboardButton("–í–µ—Ä—Å—Ç–∞–∫"),
        KeyboardButton("–¢–æ–ø"),
        KeyboardButton("–Æ–∑"),
        KeyboardButton("–°—Ç–∞—Ç—ã"),
        KeyboardButton("–ü–æ–≥–æ–¥–∞"),
        KeyboardButton("–û–±–º–µ–Ω–Ω–∏–∫"),
        KeyboardButton("–ì–∞–π–¥"),
    ]
)


@bot.message_handler(commands=["start"])
def start(message: Message):
    with Loading(message):
        user_id = message.from_user.id

        user = database.users.get(id=message.from_user.id)

        mess = (
            f"–ó–¥–∞—Ä–æ–≤–∞ {message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É\n\n"
            "–ü–æ–º–æ—â—å: /help"
        )

        if len(message.text.split("/start ")) != 1:  # pyright: ignore
            param = message.text.split("/start ")[1]  # pyright: ignore
            users_id = [str(user.id) for user in database.users.get_all()]

            if param in users_id:
                if str(user_id) == param:
                    bot.reply_to(message, mess)
                    return
                if user is not None:
                    bot.reply_to(message, mess)
                    return
                ref_user = user = database.users.get(id=param)
                if not ref_user:
                    bot.reply_to(message, mess, reply_markup=START_MARKUP)
                    return
                user = database.users.get(id=message.from_user.id)

                coin = random.randint(5000, 15000)
                ref_user.coin += coin
                database.users.update(**ref_user.to_dict())
                bot.send_message(
                    ref_user.id,
                    (
                        f"{user.name} –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ –±–ª–æ–≥–æ–¥–∞—Ä—è —Ç–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ\n"
                        f"–¢—ã –ø–æ–ª—É—á–∏–ª {coin} –±–∞–±–ª–∞ {get_item_emoji('–±–∞–±–ª–æ')}"
                    ),
                )
                return

        if message.chat.type != "private":
            markup = ReplyKeyboardMarkup()
        else:
            markup = START_MARKUP

        bot.reply_to(message, mess, reply_markup=markup)


@bot.message_handler(commands=["help"])
def help(message: Message):
    mess = (
        "<b>–ü–æ–º–æ—â—å</b>\n\n"
        "<b>–ö–∞–Ω–∞–ª:</b> @LiveBotOfficial\n"
        "<b>–ß–∞—Ç</b>: @LiveBotOfficialChat\n"
        "<b>–ì–∞–π–¥</b>: https://hamletsargsyan.github.io/livebot/guide\n"
    )

    bot.reply_to(message, mess)


@bot.message_handler(commands=["profile"])
def profile_cmd(message: Message):
    with Loading(message):
        if message.reply_to_message:
            user = user = database.users.get(id=message.reply_to_message.from_user.id)
        else:
            user = database.users.get(id=message.from_user.id)

        check_user_stats(user, message.chat.id)

        mess = (
            f"<b>–ü—Ä–æ—Ñ–∏–ª—å {user.name}</b>\n\n"
            f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {user.health}\n"
            f"üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {user.mood}\n"
            f"üí§ –£—Å—Ç–∞–ª–æ—Å—Ç—å: {user.fatigue}\n"
            f"üçû –ì–æ–ª–æ–¥: {user.hunger}\n"
            f"ü™ô –ë–∞–±–ª–æ: {user.coin}\n"
            f"üçÄ –£–¥–∞—á–∞: {user.luck}\n"
            f"üèµ –£—Ä–æ–≤–µ–Ω—å: {user.level}\n"
            f"üéó –û–ø—ã—Ç {int(user.xp)}/{int(user.max_xp)}\n"
        )
        bot.reply_to(message, mess)


@bot.message_handler(commands=["bag"])
def bag_cmd(message: Message):
    with Loading(message):
        user = database.users.get(id=message.from_user.id)

        mess = "<b>–†—é–∫–∑–∞–∫</b>\n\n"
        inventory = database.items.get_all(**{"owner": user._id})
        if not inventory:
            mess += "<i>–ü—É—Å—Ç–æ...</i>"
        else:
            sorted_items = sorted(
                inventory, key=lambda item: item.quantity, reverse=True
            )

            for item in sorted_items:
                if item.quantity <= 0:
                    continue
                mess += f"{get_item_emoji(item.name)} {item.name} - {item.quantity}\n"

        bot.reply_to(message, mess)


@bot.message_handler(commands=["items"])
def items_cmd(message: Message):
    with Loading(message):
        mess = f"<b>–ü—Ä–µ–¥–º–µ—Ç—ã</b>\n\n1 / {len(list(chunks(items_list, 6)))}"
        user = database.users.get(id=message.from_user.id)
        markup = markup = InlineMarkup.items_pager(user=user)

        bot.reply_to(message, mess, reply_markup=markup)


@bot.message_handler(commands=["shop"])
def shop_cmd(message: Message):
    with Loading(message):
        args = str(message.text).split(" ")

        if len(args) != 3:
            mess = "<b>üõç–ú–∞–≥–∞–∑–∏–Ωüõç</b>\n\n"
            for item in items_list:
                if not item.price:
                    continue

                mess += f"{item.emoji} {item.name} - {item.price}/—à—Ç.\n"
            bot.reply_to(message, mess)
            return

        err_mess = "–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞–ª\n" "–ù–∞–¥–æ: <code>/shop –±—É—Ö–∞–Ω–∫–∞ 10</code>"

        if len(args) != 3:
            bot.reply_to(message, err_mess)
            return

        user = database.users.get(id=message.from_user.id)

        item_name = args[1]
        try:
            count = int(args[2])
        except (ValueError, IndexError):
            count = 1

        if not get_item(item_name):
            bot.reply_to(message, "–¢–∞–∫–æ–≥–æ –ø—Ä–∏–¥–º–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return

        item = get_item(item_name)

        if not item.price:
            bot.reply_to(message, "–≠—Ç–æ—Ç –ø—Ä–∏–¥–º–µ—Ç –Ω–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å, —É –Ω–µ–≥–æ –Ω–µ—Ç —Ü–µ–Ω—ã")
            return

        price = item.price * count
        if user.coin < price:
            bot.reply_to(message, "–£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –±–∞–±–ª–∞, –∏–¥–∏ —Ä–∞–±–æ—Ç–∞—Ç—å")
            return

        user.coin -= price
        user_item = get_or_add_user_item(user, get_item(item.name).name)

        user_item.quantity += count
        database.users.update(**user.to_dict())
        database.items.update(**user_item.to_dict())

        bot.reply_to(
            message,
            f"–ö—É–ø–∏–ª {count} {item.name} {get_item_emoji(item.name)} –∑–∞ {price} {get_item_emoji('–±–∞–±–ª–æ')}",
        )


@bot.message_handler(commands=["casino"])
def casino(message: Message):
    with Loading(message):
        count = extract_arguments(str(message.text))

        if count == "":
            mess = (
                "<b>üé∞–ö–∞–∑–∏–Ω–æüé∞</b>\n\n"
                "–†–µ—à–∏–ª –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –ª–µ–≥–∫–∏–µ –¥–µ–Ω—å–≥–∏? –ù—É –¥–∞–≤–∞–π\n"
                "–®–∞–Ω—Å—ã 50 –Ω–∞ 50\n"
                "–ß—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –Ω–∞–ø–∏—à–∏ <code>/casino –∫–æ–ª-–≤–æ</code>"
            )
            bot.reply_to(message, mess)
            return

        try:
            count = int(count)
        except ValueError:
            count = 1

        user = database.users.get(id=message.from_user.id)

        ticket = get_or_add_user_item(user, "–±–∏–ª–µ—Ç")

        if (not ticket) or (ticket.quantity <= 0):
            bot.reply_to(
                message,
                f"–ß—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ —É —Ç–µ–±—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–∏–ª–µ—Ç {get_item_emoji('–±–∏–ª–µ—Ç')}",
            )
            return

        chance = random.randint(0, 10)

        if count > user.coin:
            bot.reply_to(
                message,
                f"–ù–∏—Ñ–∏–≥–∞ —Å–µ —Ü–∏—Ñ—Ä—ã, —É —Ç–µ–±—è –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ {user.coin} {get_item_emoji('–±–∞–±–ª–æ')}",
            )
            return

        if count <= 0:
            count = 1

        if user.coin <= 0:
            bot.reply_to(message, "–ö—É–¥–∞–∞, —É —Ç–µ–±—è –Ω–µ—Ç –±–∞–±–ª–∞, –∏–¥–∏ —Ä–∞–±–æ—Ç–∞—Ç—å")
            return

        bot.send_dice(message.chat.id, "üé≤")
        ticket.quantity -= 1
        if chance <= 5:
            bot.send_message(message.chat.id, f"–ë–ª–∏–Ω, —Å–æ—Ä—è–Ω\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n-{count}")
            user.coin -= count
            user.casino_loose += count

        else:
            bot.send_message(message.chat.id, f"–ù–∏—Ñ–∏–≥–∞ —Å–µ\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n+{count * 2}")
            user.coin += count * 2
            user.casino_win += count * 2

        database.users.update(**user.to_dict())
        database.items.update(**ticket.to_dict())
        check_user_stats(user, message.chat.id)


@bot.message_handler(commands=["workbench", "craft"])
def workbench_cmd(message: Message):
    with Loading(message):
        user = database.users.get(id=message.from_user.id)

        mess = (
            "<b>üß∞–í–µ—Ä—Å—Ç–∞–∫üß∞</b>\n\n"
            "–ß—Ç–æ–±—ã —Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å —á—Ç–æ—Ç–æ —Ç–æ –Ω–∞–ø–∏—à–∏ <code>/craft –±—É—Ö–∞–Ω–∫–∞ 1</code>\n\n"
        )

        args = str(message.text).split(" ")

        if not args or len(args) < 2:
            available_crafts = get_available_crafts(user)
            if available_crafts:
                mess += "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∞—Ñ—Ç—ã</b>\n"
                for craft_data in available_crafts:
                    item_name = craft_data["item_name"]
                    resources = craft_data["resources"]

                    possible_crafts = min(
                        user_count // count for _, count, user_count in resources
                    )
                    craft_str = (
                        f"{get_item_emoji(item_name)} {item_name} - {possible_crafts}\n"
                    )
                    mess += f"{craft_str}"

            bot.reply_to(message, mess)
            return

        name = args[1].lower()
        try:
            count = int(args[2])
        except (ValueError, IndexError):
            count = 1

        if not get_item(name):
            bot.reply_to(message, "–¢–∞–∫–æ–≥–æ –ø—Ä–∏–¥–º–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return

        item_data = get_item(name)

        if not item_data.craft:
            bot.reply_to(message, f"–£ {item_data.emoji} –Ω–µ—Ç –∫—Ä–∞—Ñ—Ç–∞")
            return

        craft = item_data.craft

        for craft_item in craft.items():
            user_item = get_or_add_user_item(user, craft_item[0])
            if (
                (not user_item)
                or (user_item.quantity <= 0)
                or (user_item.quantity < craft_item[1] * count)
            ):
                bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç–∞—Ç–∏—á–Ω–æ –ø—Ä–∏–¥–º–µ—Ç–æ–≤")
                return

            user_item.quantity -= craft_item[1] * count
            database.items.update(**user_item.to_dict())

        item = get_or_add_user_item(user, name)

        item.quantity += count
        xp = random.uniform(5.0, 10.0) * count
        if random.randint(1, 100) < user.luck:
            xp += random.uniform(2.3, 6.7)

        user.xp += xp

        database.items.update(**item.to_dict())
        database.users.update(**user.to_dict())
        bot.reply_to(
            message, f"–°–∫—Ä–∞—Ñ—Ç–∏–ª {count} {name} {get_item_emoji(name)}\n+ {int(xp)} —Ö–ø"
        )

        check_user_stats(user, message.chat.id)


@bot.message_handler(commands=["transfer"])
def transfer_cmd(message: Message):
    with Loading(message):
        if not message.reply_to_message:
            bot.reply_to(message, "–ö–æ–º—É –∫–∏–¥–∞—Ç—å —Å–æ–±—Ä–∞–ª—Å—è??")
            return

        user = database.users.get(id=message.from_user.id)
        reply_user = database.users.get(id=message.reply_to_message.from_user.id)

        args = message.text.split(" ")  # pyright: ignore

        err_mess = (
            "–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ –Ω–∞–ø–∏—Å–∞–ª, –Ω–∞–¥–æ —Ç–∞–∫:\n" "<code>/transfer –±—É—Ö–∞–Ω–∫–∞ 10</code>"
        )

        if len(args) < 2:
            bot.reply_to(message, err_mess)
            return

        item = args[1].lower()
        try:
            count = int(args[2])
        except (ValueError, IndexError):
            count = 1

        if item != "–±–∞–±–ª–æ":
            item_data = get_or_add_user_item(user, item)
            reply_user_item_data = get_or_add_user_item(reply_user, item)
            logger.debug(item_data.quantity)
            logger.debug(count)

        if item == "–±–∞–±–ª–æ":
            if user.coin <= 0:
                bot.reply_to(message, f"–£ —Ç–µ–±—è –Ω–µ—Ç <i>{item}</i>")
                return
            elif user.coin <= count:
                bot.reply_to(message, "–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–∏—á–Ω–æ –±–∞–±–ª–∞, –∏–¥–∏ —Ä–∞–±–æ—Ç–∞—Ç—å")
                return
            user.coin -= count
            reply_user.coin += count
        else:
            if not get_item(item):
                bot.reply_to(
                    message, f"{item}??\n–°–µ—Ä—ë–∑–Ω–æ?\n\n–¢–∞–∫–æ–≥–æ –ø—Ä–∏–¥–º–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                )
                return
            if (item_data.quantity < count) or (item_data.quantity <= 0):
                bot.reply_to(message, f"–£ —Ç–µ–±—è –Ω–µ—Ç <i>{item}</i>")
                logger.debug(item_data.quantity)
                logger.debug(count)
                return

            item_data.quantity -= count
            reply_user_item_data.quantity += count
            database.items.update(**reply_user_item_data.to_dict())
            database.items.update(**item_data.to_dict())

        mess = (
            f"{user.name} –ø–æ–¥–∞—Ä–∏–ª {reply_user.name}\n"
            "----------------\n"
            f"{get_item_emoji(item)} {item} {count}"
        )

        database.users.update(**user.to_dict())
        database.users.update(**reply_user.to_dict())

        bot.send_message(message.chat.id, mess)


@bot.message_handler(commands=["event"])
def event_cmd(message: Message):
    with Loading(message):
        user = database.users.get(id=message.from_user.id)

        if event_open is False:
            bot.reply_to(message, "–ò–≤–µ–Ω—Ç –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
            return

        if event_end_time < datetime.utcnow():
            mess = "–ò–≤–µ–Ω—Ç –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –∂–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ—Å—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ üíô"
            bot.reply_to(message, mess)
            return

        time_difference = event_end_time - datetime.utcnow()
        time_left = get_time_difference_string(time_difference)

        mess = (
            "<b>–ò–≤–µ–Ω—Ç ü¶ã</b>\n\n"
            "–°–æ–±–µ—Ä–∞–π ü¶ã –∏ –ø–æ–±–µ–∂–¥–∞–π\n\n"
            "–ë–∞–±–æ—á–µ–∫ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏, –≤ –±–æ–∫—Å–µ –∏ –≤ —Å—É–Ω–¥—É–∫–µ\n\n"
            f"<b>–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å:</b> {time_left}\n\n"
            "<b>–¢–æ–ø 10 –ø–æ ü¶ã</b>\n\n"
        )

        butterflys = [
            get_or_add_user_item(user, "–±–∞–±–æ—á–∫–∞") for user in database.users.get_all()
        ]
        sorted_butterflys: List[ItemModel] = sorted(
            butterflys, key=lambda butterfly: butterfly.quantity, reverse=True
        )
        for index, butterfly in enumerate(sorted_butterflys, start=1):
            if butterfly.quantity > 0:
                owner = database.users.get(**{"_id": butterfly.owner})
                mess += f"{index}. {owner.name or '<i>–Ω–µ–æ–ø–æ–∑–Ω–∞–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂</i>'} - {butterfly.quantity}\n"
            if index == 10:
                break

        butterfly = get_or_add_user_item(user, "–±–∞–±–æ—á–∫–∞")
        mess += f"\n\n–¢—ã —Å–æ–±—Ä–∞–ª: {butterfly.quantity}"
        bot.reply_to(message, mess)


@bot.message_handler(commands=["top"])
def top_cmd(message: Message):
    with Loading(message):
        mess = coin_top()

        markup = quick_markup(
            {
                "ü™ô": {"callback_data": f"top coin {message.from_user.id}"},
                "üèµ": {"callback_data": f"top level {message.from_user.id}"},
                "üê∂": {"callback_data": f"top dog_level {message.from_user.id}"},
            }
        )

        bot.reply_to(message, mess, reply_markup=markup)


@bot.message_handler(commands=["use"])
def use_cmd(message: Message):
    with Loading(message):
        user = database.users.get(id=message.from_user.id)

        args = str(message.text).split(" ")

        if len(args) < 2:
            markup = InlineKeyboardMarkup()
            buttons = []
            items = get_available_items_for_use(user)

            for user_item in items:
                item = get_item(user_item.name)
                buttons.append(
                    InlineKeyboardButton(
                        f"{item.emoji} {user_item.quantity}",
                        callback_data=f"use {item.translit()} {user.id}",
                    )
                )

            markup.add(*buttons)

            if items:
                mess = "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–¥–º–µ—Ç—ã –¥–ª—è —é–∑–∞</b>\n\n"
            else:
                mess = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–¥–º–µ—Ç–æ–≤ –¥–ª—è —é–∑–∞"
            bot.reply_to(message, mess, reply_markup=markup)
            return


@bot.message_handler(commands=["ref"])
def ref(message: Message):
    with Loading(message):
        user = database.users.get(id=message.from_user.id)

        mess = (
            "–•–æ—á–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å?\n"
            "–¢—ã –ø–æ –∞–¥—Ä–µ—Å—É, –ø—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏ –æ—Ç 5–∫ –¥–æ 15–∫ –±–∞–±–ª–∞\n"
            f"–í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–æ—á–∫–∞: https://t.me/{bot.get_me().username}?start={user.id}"
        )
        bot.reply_to(message, mess)


@bot.message_handler(commands=["add_promo"])
def add_promo(message: Message):
    with Loading(message):
        user = database.users.get(id=message.from_user.id)

        if not user.is_admin:
            return

        chars = string.digits + string.ascii_letters
        promo = "".join(random.choices(chars, k=6))
        try:
            promo_code = database.promos.get(name=promo)
        except NoResult:
            promo_code = None

        if promo_code:
            promo = "".join(random.choices(chars, k=6))
        mess = "<b>–ù–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥</b>\n\n" f"<b>–ö–æ–¥:</b> <code>{promo}</code>\n"

        items = {}
        usage_count = 1
        description = None

        line_num = 0
        for line in str(message.text).split("\n"):
            if line_num == 0:
                try:
                    usage_count = int(line.split(" ")[-1])
                except ValueError:
                    usage_count = 1
                mess += f"<b>–ö–æ–ª-–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã–π:</b> <code>{usage_count}</code>\n"
            elif line_num == 1:
                description = None if line in ["None", "none"] else line
                if description:
                    mess += f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> <i>{description}</i>\n\n"
            elif line_num == 2:
                for item in line.split(", "):
                    name = item.split(" ")[0]
                    quantity = int(item.split(" ")[1])
                    name = name.lower()
                    if get_item(name):
                        items[name] = quantity
                        mess += (
                            f"{quantity} {get_item(name).name} {get_item(name).emoji}\n"
                        )

            line_num += 1

        code = PromoModel(
            name=promo, usage_count=usage_count, description=description, items=items
        )

        database.promos.add(**code.to_dict())

        bot.reply_to(message, mess)


@bot.message_handler(commands=["promo"])
def promo(message: Message) -> None:
    with Loading(message):
        user = database.users.get(id=message.from_user.id)

        tg_user = bot.get_chat_member(channel_id, message.from_user.id)
        chat_info = bot.get_chat(channel_id)
        bot.delete_message(message.chat.id, message.id)
        if tg_user.status not in ["member", "administrator", "creator"]:
            markup = quick_markup({"–ü–æ–¥–ø–∏—Å–∞—Ç—Å—è": {"url": f"t.me/{chat_info.username}"}})
            bot.send_message(
                message.chat.id,
                "–ß—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª",
                reply_markup=markup,
            )
            return

        text = str(message.text).split(" ")

        if len(text) != 1:
            text = text[1]

            code = database.promos.get(name=text)
            if code:
                promo_users = code.users
                if user.id in promo_users:
                    bot.send_message(
                        message.chat.id, "–¢—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥"
                    )
                    return

                if code.is_used:
                    bot.send_message(message.chat.id, "–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏")
                    return

                code.usage_count -= 1

                if code.usage_count <= 0:
                    code.usage_count = 0
                    code.is_used = True

                mess = f"–£—Ö—Ç—ã—ã, {user.name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ –∏ –ø–æ–ª—É—á–∏–ª\n\n"
                for item in code.items:
                    if item == "–±–∞–±–ª–æ":
                        user.coin += code.items[item]
                        database.users.update(**user.to_dict())
                    else:
                        user_item = get_or_add_user_item(user, item)
                        user_item.quantity += code.items[item]
                        database.items.update(**user_item.to_dict())
                    mess += f"+ {code.items[item]} {item} {get_item_emoji(item)}\n"
                promo_users.append(user.id)
                code.users = promo_users

                database.promos.update(**code.to_dict())
                bot.send_sticker(
                    message.chat.id,
                    "CAACAgIAAxkBAAEpjI9l0i13xK0052Ruta0D5a5lWozGBgACHQMAAladvQrFMjBk7XkPEzQE",
                )
                bot.send_message(message.chat.id, mess)
            else:
                bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")


@bot.message_handler(commands=["stats"])
def stats_cmd(message: Message):
    with Loading(message):
        user = database.users.get(id=message.from_user.id)

        mess = (
            "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n\n"
            f"<b>[ –ö–∞–∑–∏–Ω–æ ]</b>\n"
            f"- –í—ã–∏–≥—Ä–∞–ª: {user.casino_win}\n"
            f"- –ü—Ä–æ—Å—Ä–∞–ª: {user.casino_loose}\n"
            f"- –ü—Ä–æ—Ñ–∏—Ç: {user.casino_win - user.casino_loose}\n\n"
            f"<b>[ –û–±—â–µ–µ ]</b>\n"
            f"- –ö–æ–ª-–≤–æ –¥–Ω–µ–π –≤ –∏–≥—Ä–µ: {(datetime.utcnow() - user.registered_at).days} –¥.\n"
            f"- –ó–∞–±–∞–Ω–µ–Ω: {'–¥–∞' if user.is_banned else '–Ω–µ—Ç'}\n"
            f"- –ê–¥–º–∏–Ω: {'–¥–∞' if user.is_admin else '–Ω–µ—Ç'}"
        )

        bot.reply_to(message, mess)


@bot.message_handler(commands=["quest"])
def quest_cmd(message: Message):
    with Loading(message):
        user = database.users.get(id=message.from_user.id)
        try:
            quest = database.quests.get(**{"owner": user._id})
        except NoResult:
            quest = None

        if not quest:
            quest = generate_quest(user)
        if not user.new_quest_coin_quantity:
            user.new_quest_coin_quantity = 2

        item = get_or_add_user_item(user, quest.name)

        finish_button_text = (
            f"{item.quantity} / {quest.quantity}"
            if item.quantity < quest.quantity
            else "–ó–∞–≤–µ—Ä—à–∏—Ç—å"
        )
        markup = InlineKeyboardMarkup()
        markup.add(
            *[
                InlineKeyboardButton(
                    finish_button_text, callback_data=f"finish_quest {user.id}"
                ),
                InlineKeyboardButton("–ü—Ä–æ–ø—É—Å–∫", callback_data=f"skip_quest {user.id}"),
            ]
        )

        mess = (
            "<b>–ö–≤–µ—Å—Ç</b>\n\n"
            f"<i>–°–æ–±–µ—Ä–∏ {quest.quantity} {quest.name} {get_item_emoji(quest.name)}</i>\n\n"
            f"<b>–ù–∞–≥—Ä–∞–¥–∞:</b> {quest.reward} {get_item_emoji('–±–∞–±–ª–æ')}"
        )

        bot.reply_to(message, mess, reply_markup=markup)


@bot.message_handler(commands=["weather"])
def weather_cmd(message: Message):
    with Loading(message):
        weather = get_weather()

        mess = (
            f"<b>{weather.weather.emoji} –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã</b>\n\n"
            f"{weather.main.temp} ¬∞C\n"
            f"{weather.weather.ru_name}"
        )

        bot.reply_to(message, mess)


@bot.message_handler(commands=["exchanger"])
def exchanger_cmd(message: Message):
    # if True:
    #     bot.reply_to(
    #         message,
    #         "–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑–∑–∞ <a href='https://github.com/HamletSargsyan/livebot/issues/18'>–±–∞–≥–∞</a> :(",
    #     )
    #     return
    with Loading(message):
        user = database.users.get(id=message.from_user.id)

        if user.level < 5:
            bot.reply_to(message, "–û–±–º–µ–Ω–Ω–∏–∫ –¥–æ—Å—Ç—É–ø–µ–Ω —Å 5 —É—Ä–æ–≤–Ω—è")
            return

        try:
            exchanger = database.exchangers.get(**{"owner": user._id})
        except NoResult:
            exchanger = generate_exchanger(user)

        if exchanger.expires > datetime.utcnow() + timedelta(days=1):
            exchanger = generate_exchanger(user)
            database.exchangers.update(**exchanger.to_dict())

        mess = (
            "<b>–û–±–º–µ–Ω–Ω–∏–∫ üîÑ</b>\n\n"
            f"<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {exchanger.item} {get_item_emoji(exchanger.item)}\n"
            f"<b>–¶–µ–Ω–∞ –∑–∞ 1 —à—Ç:</b> {exchanger.price} {get_item_emoji('–±–∞–±–ª–æ')}\n\n"
            f"–ß—Ç–æ–±—ã –æ–±–µ–º–µ–Ω—è—Ç—å –Ω–∞–ø–∏—à–∏ <code>/exchanger –∫–æ–ª-–≤–æ</code>"
        )

        args = str(message.text).split(" ")

        if len(args) < 2:
            bot.reply_to(message, mess)
            return

        try:
            quantity = int(args[1])
        except (ValueError, IndexError):
            quantity = 1

        user_item = get_or_add_user_item(user, exchanger.item)

        if not user_item:
            bot.reply_to(message, f"–£ —Ç–µ–±—è –Ω–µ—Ç {get_item_emoji(exchanger.item)}")
            return

        if user_item.quantity < quantity:
            bot.reply_to(message, "–¢–µ–±–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç")
            return

        coin = quantity * exchanger.price
        user.coin += coin
        user_item.quantity -= quantity

        database.users.update(**user.to_dict())
        database.items.update(**user_item.to_dict())

        bot.reply_to(
            message,
            f"–û–±–º–µ–Ω—è–ª {quantity} {get_item_emoji(exchanger.item)} –∑–∞ {coin} {get_item_emoji('–±–∞–±–ª–æ')}",
        )


@bot.message_handler(commands=["dog"])
def dog_cmd(message: Message):
    with Loading(message):
        user = database.users.get(id=message.from_user.id)

        try:
            dog = database.dogs.get(**{"owner": user._id})
            print(dog.to_dict())
        except NoResult:
            dog = None

        if not dog:
            bot.reply_to(message, "–£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ–±–∞—á–∫–∏")
            return

        mess = (
            f"<b>{dog.name}</b>\n\n"
            f"–ó–¥–æ—Ä–æ–≤—å–µ: {dog.health}\n"
            f"–£—Å—Ç–∞–ª–æ—Å—Ç—å: {dog.fatigue}\n"
            f"–ì–æ–ª–æ–¥: {dog.hunger}\n"
            f"–£—Ä–æ–≤–µ–Ω—å: {dog.level}\n"
            f"–û–ø—ã—Ç {int(dog.xp)}/{int(dog.max_xp)}\n"
        )

        # current_time = datetime.utcnow()
        # time_difference = current_time - user.dog.sleep_time

        # sleep_text = "–£–ª–æ–∂–∏—Ç—å —Å–ø–∞—Ç—å"
        # sleep_callback = f"dog sleep {user.id}"
        # if time_difference <= timedelta(minutes=1):
        #     sleep_text = "–ü—Ä–æ–±—É–¥–∏—Ç—å"
        #     sleep_callback = f"dog wakeup {user.id}"

        markup = quick_markup(
            {
                "–ö–æ—Ä–º–∏—Ç—å": {"callback_data": f"dog feed {user.id}"},
                # sleep_text: {"callback_data": sleep_callback}
            }
        )

        bot.reply_to(message, mess, reply_markup=markup)


@bot.message_handler(commands=["rename_dog"])
def rename_dog_command(message: Message):
    with Loading(message):
        user = database.users.get(id=message.from_user.id)

        try:
            dog = database.dogs.get(**{"owner": user._id})
        except NoResult:
            dog = None

        if not dog:
            bot.reply_to(message, "–£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ–±–∞—á–∫–∏")
            return

        try:
            name = message.text.split(" ")[1]  # pyright: ignore
        except KeyError:
            bot.reply_to(message, "–ü–æ –º–æ–µ–º—É —Ç—ã –∑–∞–±—ã–ª –Ω–∞–ø–∏—Å–∞—Ç—å –∏–º—è")
            return

        dog.name = name
        database.dogs.update(**dog.to_dict())

        bot.reply_to(message, "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª —Å–æ–±–∞—á–∫—É")


@bot.message_handler(commands=["price"])
def price_cmd(message: Message):
    with Loading(message):
        try:
            name = str(message.text).split(" ")[1].lower()
        except KeyError:
            bot.reply_to(message, "–ü–æ –º–æ–µ–º—É —Ç—ã —á—Ç–æ—Ç–æ –∑–∞–±—ã–ª...")
            return

        item = get_item(name)
        price = get_middle_item_price(item.name)
        if not item:
            mess = "–¢–∞–∫–æ–≥–æ –ø—Ä–∏–¥–º–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        elif price:
            mess = f"–ü—Ä–∞–π—Å {item.name} {item.emoji} ‚∏ª {price} {get_item_emoji('–±–∞–±–ª–æ')}"
        else:
            mess = f"–£ {item.emoji} –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∞–π—Å–∞"

        bot.reply_to(message, mess)


@bot.message_handler(commands=["home"])
def home_cmd(message: Message):
    with Loading(message):
        user = database.users.get(id=message.from_user.id)
        mess = "üè† –î–æ–º –º–∏–ª—ã–π –¥–æ–º"

        markup = InlineMarkup.home_main(user)

        bot.reply_to(message, mess, reply_markup=markup)


@bot.message_handler(commands=["guide"])
def guide_cmd(message: Message):
    mess = "–ì–∞–π–¥ –ø–æ LiveBot üçÉ"
    markup = InlineKeyboardMarkup()
    guide_url = "https://hamletsargsyan.github.io/livebot/guide"
    if message.chat.type == "private":
        markup.add(
            InlineKeyboardButton(
                "–ß–∏—Ç–∞—Ç—å",
                web_app=WebAppInfo(guide_url),
            )
        )
    else:
        mess += f"\n\n{guide_url}"

    bot.send_message(message.chat.id, mess, reply_markup=markup)


@bot.message_handler(commands=["market"])
def market_cmd(message: Message):
    user = database.users.get(id=message.from_user.id)

    mess = "<b>–†—ã–Ω–æ–∫</b>\n\n"

    market_items = database.market_items.get_all()
    markup = InlineMarkup.market_pager(user)
    mess += f"1 / {len(list(chunks(market_items, 6)))}"

    bot.reply_to(message, mess, reply_markup=markup)


@bot.message_handler(commands=["daily_gift"])
def daily_gift_cmd(message: Message):
    user = database.users.get(id=message.from_user.id)

    if not check_user_subscription(user):
        send_channel_subscribe_message(message)
        return

    try:
        daily_gift = database.daily_gifts.get(owner=user._id)
    except NoResult:
        daily_gift = generate_daily_gift(user)

    mess = "<b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫</b>"

    if daily_gift.next_claimable_at > datetime.utcnow() + timedelta(days=1):
        daily_gift = generate_daily_gift(user)

    markup = InlineMarkup.daily_gift(user, daily_gift)
    bot.reply_to(message, mess, reply_markup=markup)


# ---------------------------------------------------------------------------- #


@bot.message_handler(content_types=["new_chat_members"])
def new_chat_member(message: Message):
    if not message.new_chat_members:
        return

    for new_member in message.new_chat_members:
        if message.chat.id == chat_id:
            mess = f"–ü—Ä–∏–≤–µ—Ç {user_link(new_member)}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ—Ñ–∏—Ü–µ–∞–ª—å–Ω—ã–π —á–∞—Ç –ø–æ –ª–∞–π–≤–±–æ—Ç—É üíô\n\n"
            bot.send_message(message.chat.id, mess)


@bot.channel_post_handler(content_types=content_type_media)
def handle_channel_post(message: Message):
    if str(message.chat.id) != channel_id:
        return

    for user in database.users.get_all():
        try:
            antiflood(bot.forward_message, user.id, message.chat.id, message.id)
            antiflood(
                bot.send_message,
                user.id,
                "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
                reply_markup=START_MARKUP,
            )
        except ApiTelegramException:
            continue


@bot.message_handler(content_types=["text"])
def text_message_handler(message: Message):
    user = database.users.get(id=message.from_user.id)

    text = str(message.text).lower().strip()

    if text == "–ø—Ä–æ—Ñ–∏–ª—å":
        profile_cmd(message)
    elif text in ["–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", "–ø–æ—Ä—Ç—Ñ–µ–ª—å", "–∏–Ω–≤"]:
        bag_cmd(message)
    elif text.startswith(("–º–∞–≥–∞–∑–∏–Ω", "—à–æ–ø")):
        shop_cmd(message)
    elif text.startswith(("–∫—Ä–∞—Ñ—Ç", "–≤–µ—Ä—Å—Ç–∞–∫")):
        workbench_cmd(message)
    elif text in ["—Ç–æ–ø", "—Ä–µ–π—Ç–∏–Ω–≥"]:
        top_cmd(message)
    elif text == "–∏–≤–µ–Ω—Ç":
        event_cmd(message)
    elif text.startswith("—é–∑"):
        use_cmd(message)
    elif text == "–ø—Ä–∏–¥–º–µ—Ç—ã":
        items_cmd(message)
    elif text == "–±–∞–±–ª–æ":
        with Loading(message):
            bot.reply_to(message, f"{get_item_emoji('–±–∞–±–ª–æ')} –ë–∞–±–ª–æ: {user.coin}")
    elif text == "—Å—Ç–∞—Ç—ã":
        stats_cmd(message)
    elif text == "–∫–≤–µ—Å—Ç":
        quest_cmd(message)
    elif text == "–ø–æ–≥–æ–¥–∞":
        weather_cmd(message)
    elif text == "–æ–±–º–µ–Ω–Ω–∏–∫":
        exchanger_cmd(message)
    elif text.startswith("–ø–µ—Ä–µ–¥–∞—Ç—å"):
        transfer_cmd(message)
    elif text == "—Å–æ–±–∞–∫–∞":
        dog_cmd(message)
    elif text.startswith("–ø—Ä–∞–π—Å"):
        price_cmd(message)
    elif text == "–≥–∞–π–¥":
        guide_cmd(message)
    elif text == "–¥–æ–º":
        home_cmd(message)
    elif text == "—Ä—ã–Ω–æ–∫":
        market_cmd(message)
